from .handlers import bot
from main_app.models import *
from main_app.management.commands.keyboards import *
from vape_shop.settings import DADATA_TOKEN
from dadata import Dadata
from django.db.models import Q


@bot.message_handler(regexp='^(üìÇ –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã)$')
def my_purchase_handlers(message):
    order_product_queryset = OrderingProduct.objects.filter(user__chat_id=message.chat.id)
    if not order_product_queryset:
        text = '–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫'
        return bot.send_message(chat_id=message.chat.id, text=text)
    bot.send_message(chat_id=message.chat.id, text='–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä:', reply_markup=purchase_keyboard(order_product_queryset))


@bot.callback_query_handler(func=lambda call: call.data.split('~')[0] == 'sp')
def track_code_handlers(call):
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    try:
        pk = call.data.split('~')[1]
        order_product = OrderingProduct.objects.get(Q(user__chat_id=call.message.chat.id) & Q(pk=pk))
    except:
        return bot.send_message(chat_id=call.message.chat.id, text='–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')
    text = ''
    for item in order_product.sold_product.all():
        text += f'–¢–æ–≤–∞—Ä - {item.product.title}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ - {item.count}\n\n'
    
    if not order_product.track_code:
        text += '–£ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–µ–∫ –Ω–æ–º–µ—Ä–∞, –Ω–æ —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –æ–Ω –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è'

    else:
        text += f'–¢—Ä–µ–∫ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ - {order_product.track_code}'
    bot.send_message(chat_id=call.message.chat.id, text=text)