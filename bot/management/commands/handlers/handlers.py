import telebot
from django.db.models import Q
from main_app.models import *
from bot.management.commands.keyboards import *
from vape_shop.settings import TELEGRAM_TOKEN

test_photo = 'https://inlnk.ru/mexGV'
cat_photo = 'https://i.ytimg.com/vi/2QvOxa_7wEw/maxresdefault.jpg'
subcat_photo = 'https://i.ytimg.com/vi/jaRANdL5qrE/maxresdefault.jpg'
bot = telebot.TeleBot(TELEGRAM_TOKEN)

category_list = [x.pk_for_telegram for x in Category.objects.all()]
subcategory_list = [x.pk_for_telegram for x in SubCategory.objects.all()]
product_list = [x.pk_for_telegram for x in Product.objects.all()]



def update_lists():
    '''–ö–∞–∂–¥—ã–π —Ä–∞–∑ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–ª–æ–≤–∞ —Ö–µ–Ω–¥–ª—Ä–µ–æ–≤'''
    global category_list, subcategory_list, product_list
    category_list = [x.pk_for_telegram for x in Category.objects.all()]
    subcategory_list = [x.pk_for_telegram for x in SubCategory.objects.all()]
    product_list = [x.pk_for_telegram for x in Product.objects.all()]



@bot.message_handler(regexp='^(üí∞ –ö–∞—Ç–∞–ª–æ–≥)$')
@bot.callback_query_handler(func=lambda call: call.data.split('~')[0] == 'back_cat')
def catalog(message):
    '''–í—ã–≤–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π'''
    update_lists()  
    try:
        user_id = message.chat.id
        data = message.chat
    except AttributeError:  # –ï—Å–ª–∏ —é–∑–µ—Ä –ø–æ–ø–∞–¥–∞–µ—Ç –Ω–∞ –¥–∞–Ω–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
        user_id = message.message.chat.id
        bot.delete_message(user_id, message.message.message_id)
        data = message.message.chat

    TelegramUser.objects.get_or_create(chat_id=data.id,
                                       defaults={
                                           'first_name': data.first_name,
                                           'last_name': data.last_name,
                                           'username': data.username
                                       })

    cart = TelegramProductCartCounter.objects.filter(Q(user__chat_id=user_id) & Q(counter=False))
    if PayProduct.objects.filter(user__chat_id=user_id).delete()[0]:    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –æ–±—Ä–∞—Ç–Ω–æ
        for item in cart:
            item.product.count += item.count
            item.product.save()
    TelegramProductCartCounter.objects.filter(Q(user__chat_id=user_id) & Q(counter=True)).delete()  # –£–¥–∞–ª—è–µ–º –∫–∞—É–Ω—Ç–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞
    categories = Category.objects.filter(subcategory__product__count__gte=1).distinct() # –¢–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Ç–æ–≤–∞—Ä
    bot.send_photo(chat_id=user_id, photo=cat_photo, caption=f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=category_keyboard(categories), parse_mode='markdown')


@bot.callback_query_handler(func=lambda call: call.data in category_list)
def category(call):
    '''–í—ã–≤–æ–¥ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π'''
    update_lists()
    try:
        category_pk = call.data.split('||')[1]
        category = Category.objects.get(pk=category_pk)
    except:
        return bot.send_message(call.message.chat.id, '–£–ø—Å! –ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')
    subcategory = category.subcategory_set.filter(product__count__gte=1).distinct() # –¢–æ–ª—å–∫–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≥–¥–µ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä
    photo = open(category.photo.path, 'rb')
    bot.edit_message_media(chat_id=call.message.chat.id, media=types.InputMediaPhoto(
        media=photo, caption=f'***–ö–∞—Ç–µ–≥–æ—Ä–∏—è - {category.name}***\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:', parse_mode='markdown'), message_id=call.message.message_id, reply_markup=category_keyboard(subcategory, back=True))


@bot.callback_query_handler(func=lambda call: call.data in subcategory_list)
def subcategory(call):
    '''–í—ã–≤–æ–¥ —Ç–æ–≤–∞—Ä–æ–≤'''
    update_lists()
    TelegramProductCartCounter.objects.filter(Q(user__chat_id=call.message.chat.id) & Q(counter=True)).delete() # –£–¥–∞–ª—è–µ–º –∫–∞—É–Ω—Ç–µ—Ä –µ—Å–ª–∏ —é–∑–µ—Ä –ø–µ—Ä–µ—à–µ–ª –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∞–∑–∞–¥
    try:
        subcategory_pk = call.data.split('||')[1]
        subcategory = SubCategory.objects.get(pk=subcategory_pk)
    except:
        return bot.send_message(call.message.chat.id, '–£–ø—Å, —á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')

    products = subcategory.product_set.filter(count__gte=1).distinct()  # –¢–æ–≤–∞—Ä —É –∫–æ—Ç–æ—Ä–æ–≥–æ 1 –∏–ª–∏ –±–æ–ª—å—à–µ –æ—Å—Ç–∞—Ç–∫–∞
    category_slug = subcategory.category.pk_for_telegram
    photo = open(subcategory.photo.path, 'rb')
    bot.edit_message_media(chat_id=call.message.chat.id, media=types.InputMediaPhoto(media=photo, 
                                                         caption=f'***–ö–∞—Ç–µ–≥–æ—Ä–∏—è - {subcategory.category.name}\n–ü–æ–¥–∫–∞—Ç–µ–æ–≥—Ä–∏—è - {subcategory.name}***\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:', parse_mode='markdown'),   
                           message_id=call.message.message_id, 
                           reply_markup=product_keyboard(category_slug, products))


@ bot.callback_query_handler(func=lambda call: call.data in product_list)
@ bot.callback_query_handler(func=lambda call: call.data.split('~')[0] == 'buy')
@ bot.callback_query_handler(func=lambda call: call.data.split('~')[0] == 'search_p')
def product(call):
    '''–í—ã–≤–æ–¥ –ø—Ä–æ–¥—É–∫—Ç–∞'''
    update_lists()
    if call.data.split('~')[0] == 'buy' or call.data.split('~')[0] == 'search_p':
        slug=call.data.split('~')[1]
    else:
        slug=call.data
    try:
        product_pk = slug.split('||')[1]
        product=Product.objects.get(pk=product_pk)
        if product.count <= 0:  # –ï—Å–ª–∏ —é–∑–µ—Ä –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–æ–≤–∞—Ä–∞, –Ω–æ –æ–Ω –∑–∞–∫–æ–Ω—á–∏–ª—Å—è
            bot.delete_message(call.message.chat.id, call.message.message_id)
            return bot.send_message(chat_id=call.message.chat.id, text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è.')
    except:
        return bot.send_message(call.message.chat.id, '–£–ø—Å, —á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.')

    user=TelegramUser.objects.get(chat_id=call.message.chat.id)
    counter=TelegramProductCartCounter.objects.get_or_create(user=user, counter=True, defaults={   
        'product': product,
    })

    if counter[1]:  # –ï—Å–ª–∏ –∫–∞—É–Ω—Ç–µ—Ä —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–Ω
        pass
    else:   # –ï—Å–ª–∏ –∫–∞—É–Ω—Ç–µ—Ä –Ω–µ —Å–æ–∑–¥–∞–Ω, –∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        count=call.data.split('~')[2]
        counter[0].count += int(count)

        if counter[0].count > product.count:    # –ï—Å–ª–∏ –≤ –∫–∞—É–Ω—Ç–µ—Ä–µ –±–æ–ª—å—à–µ –∫–æ–ª-–≤–æ —á–µ–º –≤ —Ç–æ–≤–∞—Ä–µ
            bot.answer_callback_query(
            callback_query_id=call.id, text=f'–ú–∞–∫—Å–∏–º—É–º {product.count} –µ–¥. —Ç–æ–≤–∞—Ä–∞', show_alert=False)
            counter[0].count = product.count
        else:
            if counter[0].count <= 0:   # –ï—Å–ª–∏ —é–∑–µ—Ä —Ö–æ—á–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª-–≤–æ 0 –∏–ª–∏ –º–µ–Ω—å—à–µ
                bot.answer_callback_query(
                    callback_query_id=call.id, text='–ú–∏–Ω–∏–º—É–º 1 —à—Ç—É–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏!', show_alert=False)
                counter[0].count=1
            elif counter[0].count >= product.subcategory.category.max_count_product:    # –ï—Å–ª–∏ –≤ –∫–∞–Ω—É—Ç–µ—Ä–µ –±–æ–ª—å—à–µ —á–µ–º –≤ –º–∞–∫—Å. —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–º –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–ª-–≤–∞
                bot.answer_callback_query(callback_query_id=call.id, show_alert=True, text=f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞: {product.subcategory.category.max_count_product} —à—Ç.')
                counter[0].count=product.subcategory.category.max_count_product
        counter[0].save()   # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—É–Ω—Ç–µ—Ä –ø–æ—Å–ª–µ –≤—Å–µ—Ö –≤–µ—Ç–æ–∫ 
    keyboard=buy_keyboard(subcat_slug=product.subcategory.pk_for_telegram,
                            slug=slug,
                            count=counter[0].count)
    photo = open(product.photo.path, 'rb')

    text = f'*–ù–∞–∑–≤–∞–Ω–∏–µ -* {product.title}\n*–¶–µ–Ω–∞ -* {product.price} —Ä—É–±.\n*–û–ø–∏—Å–∞–Ω–∏–µ -* {product.description}\n*–û—Å—Ç–∞—Ç–æ–∫ -* {product.count}—à—Ç.'

    if call.data.split('~')[0] == 'search_p':
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_photo(chat_id=call.message.chat.id, photo=photo, caption=text, reply_markup=keyboard, parse_mode='markdown')
        
    bot.edit_message_media(chat_id=call.message.chat.id, 
                           media=types.InputMediaPhoto(media=photo, 
                                                       caption=text, parse_mode='markdown'),   
                           message_id=call.message.message_id, 
                           reply_markup=keyboard)
    

@ bot.callback_query_handler(func=lambda call: call.data == 'add_to_cart')
def add_product_in_cart(call):
    '''–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É'''
    bot.delete_message(call.message.chat.id, call.message.message_id)
    cart_product=TelegramProductCartCounter.objects.get(Q(user__chat_id=call.message.chat.id) & Q(counter=True))  # –ò—â–µ–º –∫–∞—É–Ω—Ç–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    product_in_cart=TelegramProductCartCounter.objects.filter(Q(user__chat_id=call.message.chat.id) & Q(counter=False) & Q(product=cart_product.product))  #–ò—â–µ–º –∞–Ω–æ–ª–æ–≥–∏—á–Ω—ã–π —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
    if product_in_cart:     # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω
        if (product_in_cart[0].count + cart_product.count) > cart_product.product.subcategory.category.max_count_product:   # –ï—Å–ª–∏ –∫–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å. —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–µ –∫–æ–ª-–≤–æ –¥–ª—è –∫–∞—Ç–µ–æ–≥—Ä–∏–∏
            product_in_cart[0].count=cart_product.product.subcategory.category.max_count_product
        else:
            product_in_cart[0].count += cart_product.count # –ò–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º

        if product_in_cart[0].count > product_in_cart[0].product.count: # –ï—Å–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ –±–æ–ª—å—à–µ —á–µ–º –µ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ
            product_in_cart[0].count=product_in_cart[0].product.count

        product_in_cart[0].save()
        cart_product.delete()   # –£–¥–∞–ª—è–µ–º –∫–∞—É–Ω—Ç–µ—Ä
    else:   # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–µ–ª–∞–µ–º –∏–∑ –∫–∞—É–Ω—Ç–µ—Ä–∞
        cart_product.counter=False
        cart_product.save()
    bot.send_message(call.message.chat.id,
                     f'{cart_product.product.title}, –≤ –∫–æ–ª-–≤–µ {cart_product.count} —à—Ç. –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.', reply_markup=main_keyboard())



@ bot.message_handler(commands=['start', 'help'])
def command_start(message):
    data=message.chat
    update_lists()
    TelegramUser.objects.get_or_create(chat_id=data.id,
                                       defaults={
                                           'first_name': data.first_name,
                                           'last_name': data.last_name,
                                           'username': data.username
                                       })
    bot.send_message(
        chat_id=data.id, text='–ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å–≤—Ç—É—é', reply_markup=main_keyboard())

